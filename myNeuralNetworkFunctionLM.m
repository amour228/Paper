function [Y,Xf,Af] = myNeuralNetworkFunctionLM(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Oct-2023 16:21:05.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;30.2;0;0;0;0;0];
x1_step1.gain = [0.4;0.0666666666666667;0.0126903553299492;2.22222222222222e-05;1.21212121212121e-05;3.33333333333333;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4302210266862984689;-2.0965495287083224518;-2.0259805465962341664;-1.2328014676565863805;-1.0964875252811316919;-0.3464569556320086785;-2.6227210006141459253;-0.83744107604532724842;0.48816786487802449335;-0.092336749547279495243];
IW1_1 = [-0.046761207590938408396 0.50515064323205427499 -0.25260135796421157028 -0.032003060060509132267 0.1095244205815243399 -0.018920072299501929786 -1.5785996541683702254 -0.2167569018548269888;1.246476416729612291 0.029102440540040203781 2.1906994958766503601 0.92687627536466932199 -0.043290905287208518437 0.66207090485812936098 0.87044541628993399307 -0.20395739771472587432;0.21409906879800388868 -1.3834290026197753054 -0.42697687915735016428 0.60354501944864769047 -0.64716016902652140352 -0.25372562466463821629 1.6312651452825901455 -1.1151090175520463887;-0.069841007908765836976 1.812792756254844484 -0.23527016750310039694 -0.90305516580109534974 -1.2150792387870277267 0.1208333349097307774 -0.10989618846952498021 0.45401825669661238782;-0.85811745447144494037 -0.71187383099771561756 -2.5390354747374916933 -1.3528791042625176733 0.40968103327503924138 -0.41316287514302801887 0.30518622478975132584 0.17917506035044394874;0.22064266634952975354 1.4498982721453170797 1.3814611593146974844 0.46010151778452029747 -0.054220570193465503217 -0.68441514249177792806 1.7003813614867846482 0.38521205603141800422;0.62011930781763757725 -0.97121968865760965883 -0.48218159763380974425 0.23678301566625947761 -3.0913634331424479917 -0.3172684781997348602 2.4157475720469938629 0.94331920074348618588;-0.67059932929447418903 1.1438433250898984994 0.051998975153086546275 0.06908810846832291741 0.081027871450201210957 0.1384503834056800553 -0.56308048436283997251 1.1054663776241906437;1.3601531171100003093 -1.1268661870581877515 0.86510656397454688271 1.8229730211722872113 -0.72037905056212847565 -0.12780786518843506583 -0.29644509125804990868 -1.0530035976631217931;-0.11599763223557975345 1.490845761969274097 0.38446708731708739704 1.4095853252074159734 -0.91719092245357847215 -0.21920070989255602267 -2.7095949586292800149 3.2073331059276237731];

% Layer 2
b2 = 0.21361342384390694105;
LW2_1 = [1.2803312816271763541 0.71122867052237503938 -0.34928062590556746558 -0.53589260203437261154 -0.17181446254901849846 -0.76763203795723000677 1.104277185343001344 1.0416804249561049112 0.25946865285131676115 -0.16174359023874565477];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.000571817407265512;
y1_step1.xoffset = 12.38;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
